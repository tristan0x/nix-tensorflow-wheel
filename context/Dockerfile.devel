FROM tristan0x/nix:bbp
ARG TF_CFLAGS
ENV CC_OPT_FLAGS="${TF_CFLAGS}"
RUN ln -s /usr/bin/python3 /usr/bin/python

MAINTAINER Craig Citro <craigcitro@google.com>

RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        rsync \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# Install TensorFlow Nix requirements
# When Nix recipe has been merged into master, command below will suffice:
#       nix-env -iA bbp-pkgs.tensorflow.dependencies
RUN nix-env -i \
        -A bbp-pkgs.gcc49 \
        -A bbp-pkgs.python27Packages.backports_shutil_get_terminal_size \
        -A bbp-pkgs.python27Packages.dateutil \
        -A bbp-pkgs.python27Packages.decorator \
        -A bbp-pkgs.python27Packages.enum \
        -A bbp-pkgs.python27Packages.ipykernel \
        -A bbp-pkgs.python27Packages.ipython \
        -A bbp-pkgs.python27Packages.ipython_genutils \
        -A bbp-pkgs.python27Packages.jupyter_client \
        -A bbp-pkgs.python27Packages.jupyter_core \
        -A bbp-pkgs.python27Packages.matplotlib \
        -A bbp-pkgs.python27Packages.numpy \
        -A bbp-pkgs.python27Packages.pandas \
        -A bbp-pkgs.python27Packages.pathlib2 \
        -A bbp-pkgs.python27Packages.pathpy \
        -A bbp-pkgs.python27Packages.pexpect \
        -A bbp-pkgs.python27Packages.pickleshare \
        -A bbp-pkgs.python27Packages.prompt_toolkit \
        -A bbp-pkgs.python27Packages.pygments \
        -A bbp-pkgs.python27Packages.pyparsing \
        -A bbp-pkgs.python27Packages.python \
        -A bbp-pkgs.python27Packages.pytz \
        -A bbp-pkgs.python27Packages.pyzmq \
        -A bbp-pkgs.python27Packages.scikitlearn \
        -A bbp-pkgs.python27Packages.scipy \
        -A bbp-pkgs.python27Packages.setuptools30 \
        -A bbp-pkgs.python27Packages.simplegeneric \
        -A bbp-pkgs.python27Packages.six \
        -A bbp-pkgs.python27Packages.traitlets \
        -A bbp-pkgs.python27Packages.wcwidth \
        -A bbp-pkgs.python27Packages.wheel

ENV PYTHONPATH=/root/.nix-profile/lib/python2.7/site-packages

RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        matplotlib \
        numpy \
        scipy \
        sklearn \
        pandas \
        && \
    python -m ipykernel.kernelspec

# Set up our notebook config.
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly:
#   https://github.com/ipython/ipython/issues/7062
# We just add a little wrapper script.
COPY run_jupyter.sh /

# Set up Bazel.

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc
# Install the most recent bazel release.
ENV BAZEL_VERSION 0.5.4
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Download and build TensorFlow.

RUN git clone https://github.com/tristan0x/tensorflow.git && \
    cd tensorflow && \
    git checkout v1.4.0-bbp
WORKDIR /tensorflow

# TODO(craigcitro): Don't install the pip package, since it makes it
# more difficult to experiment with local changes. Instead, just add
# the built directory to the path.

ENV CI_BUILD_PYTHON python

# Patched version of Nix gcc wrapper to add
# -Wl,-rpath=/nix/store/xr4c5pck9dhhzk0a3dybd4mmhddyc227-gcc-wrapper-4.9.3/lib
# when linking ...
# I know ...
# sorry ...
# did not find a working bazel way to do that
#   --linkopt bazel option is not passed when building "contrib" code
ADD gcc /nix/store/xr4c5pck9dhhzk0a3dybd4mmhddyc227-gcc-wrapper-4.9.3/bin/gcc

RUN tensorflow/tools/ci_build/builds/configured CPU \
    bazel --bazelrc=/tensorflow/.tf_configure.bazelrc build --verbose_failures -s --config=opt -c opt --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        tensorflow/tools/pip_package:build_pip_package && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \
    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \
    rm -rf /root/.cache
# Clean up pip wheel and Bazel cache when done.

# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

WORKDIR /root
CMD ["/bin/bash"]
